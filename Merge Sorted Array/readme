# LeetCode Problem: Merge Sorted Arrays

## Problem Statement
You are given two integer arrays `nums1` and `nums2`, sorted in non-decreasing order, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively. Merge `nums2` into `nums1` as one sorted array.

The final sorted array should not be returned by the function but instead be stored inside the array `nums1`. To accommodate this, `nums1` has a length of `m + n`, where the first `m` elements denote the elements to be merged, and the last `n` elements are set to `0` and should be ignored.

### Example:
#### Input:
```javascript
nums1 = [1, 2, 3, 0, 0, 0], m = 3
nums2 = [2, 5, 6], n = 3
```
#### Output:
```javascript
[1, 2, 2, 3, 5, 6]
```

### Constraints:
- \(0 \leq m, n \leq 200\)
- \(1 \leq m + n \leq 200\)
- \(-10^9 \leq nums1[i], nums2[j] \leq 10^9\)
- `nums1` and `nums2` are sorted in non-decreasing order.

## Solution
This solution uses a two-pointer approach to merge the arrays from the end, which avoids the need for additional space and ensures in-place modification of `nums1`.

## Implementation
```javascript
var merge = function (nums1, m, nums2, n) {
  let i = m - 1; // Pointer for nums1's valid elements
  let j = n - 1; // Pointer for nums2
  let k = m + n - 1; // Pointer for the merged array

  // Merge arrays starting from the back
  while (i >= 0 && j >= 0) {
    if (nums1[i] > nums2[j]) {
      nums1[k] = nums1[i];
      i--;
    } else {
      nums1[k] = nums2[j];
      j--;
    }
    k--;
  }

  // Add remaining elements from nums2, if any
  while (j >= 0) {
    nums1[k] = nums2[j];
    j--;
    k--;
  }

  console.log(nums1); // For testing
};

// Test cases
merge([1, 2, 3, 0, 0, 0], 3, [2, 5, 6], 3); // Output: [1, 2, 2, 3, 5, 6]
merge([1], 1, [], 0); // Output: [1]
merge([0], 0, [1], 1); // Output: [1]
```

## Complexity Analysis
### Time Complexity:
- The algorithm traverses both arrays once: \(O(m + n)\).

### Space Complexity:
- Since the merging is done in-place, the space complexity is \(O(1)\).

## Explanation of the Algorithm
1. Start pointers `i` and `j` at the end of the valid elements in `nums1` and `nums2`, respectively.
2. Compare the elements at `i` and `j`, and place the larger element at the current end of the merged array (`k`).
3. Decrement the appropriate pointer (`i` or `j`) and the pointer `k` for the merged array.
4. After exhausting one of the arrays, copy any remaining elements from `nums2` into `nums1`.

## How to Run
1. Copy the implementation into a JavaScript file (e.g., `solution.js`).
2. Run the file using Node.js:
   ```bash
   node solution.js
   ```
3. Verify the outputs for the test cases.

## Edge Cases
1. `nums2` is empty: `merge([1], 1, [], 0)`.
2. `nums1` is empty except for placeholders: `merge([0], 0, [1], 1)`.
3. Both arrays have the same elements.

## Conclusion
This in-place merging approach is optimal for combining two sorted arrays when space is constrained. The algorithm is efficient and avoids unnecessary space usage by modifying the first array directly.

---

Happy Coding! ðŸš€
